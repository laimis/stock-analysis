#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"},{"aliases":[],"languageName":"fsharp","name":"fsharp"}]}}

#!fsharp

#r "./bin/Debug/net7.0/studies.dll"
#r "./bin/Debug/net7.0/core.fs.dll"
#r "nuget:FSharp.Data"
#r "nuget: Plotly.NET.Interactive"

#!fsharp

open FSharp.Data
open Plotly.NET

let trade_csv = "d:\\studies\\03_export_date_ticker_screenerid_gap_outcomes.csv"

let csv = studies.GapStudy.parseTradeOutcomes trade_csv

#!fsharp

let outputSummary includeChart (summary:studies.GapStudy.TradeSummary) = 

    printfn "%s: %i trades, %.2f%% win pct, %.2f%% avg gain, %.2f%% avg loss, %.2f avg gain/loss, %.2f EV" 
        summary.StrategyName summary.Total (summary.WinPct * 100m) (summary.AvgWin) (summary.AvgLoss) summary.AvgGainLoss summary.EV

    match includeChart with
    | true ->
        let chart = 
            Chart.Histogram(
                X = summary.Gains,
                NBinsX = 40,
                Name = "Gain Distribution"
            )

        chart.Display() |> ignore
    | false -> ()

#!fsharp

let filterNamePairs = [
    ("All", fun (o:studies.GapStudy.TradeOutcomeOutput.Row) -> true)
    ("New Highs", fun (o:studies.GapStudy.TradeOutcomeOutput.Row) -> o.Screenerid = 28)
    ("Top Gainers", fun (o:studies.GapStudy.TradeOutcomeOutput.Row) -> o.Screenerid = 29)
    ("Gap ups", fun (o:studies.GapStudy.TradeOutcomeOutput.Row) -> o.HasGapUp)
    ("Gap ups - new highs", fun (o:studies.GapStudy.TradeOutcomeOutput.Row) -> o.HasGapUp && o.Screenerid = 28)
    ("Gap ups - top gainers", fun (o:studies.GapStudy.TradeOutcomeOutput.Row) -> o.HasGapUp && o.Screenerid = 29)
]

let tradesGroupedByStrategy = csv |> Seq.groupBy (fun t -> t.Strategy) // all strategies, no filters

filterNamePairs
|> Seq.iter (
    fun (filterName,filter) ->

        printfn $"Trade: {filterName}"
        strategies
        |> Seq.iter (
            fun (strategy, trades) ->
                let filteredTrades = trades |> Seq.filter filter
                let summary = studies.GapStudy.summarize strategy filteredTrades
                outputSummary false summary
        )

        printfn ""
        printfn ""
)

#!fsharp

let data =
    filterNamePairs
    |> Seq.map (fun (filterName, filter) ->
        tradesGroupedByStrategy
        |> Seq.map (fun (strategy, trades) ->
            let filteredTrades = trades |> Seq.filter filter
            let summary = studies.GapStudy.summarize strategy filteredTrades
            (strategy, filterName, summary)
        )
    )
    |> Seq.concat

let sortFunctions = [
    ("EV", fun (t:studies.GapStudy.TradeSummary) -> t.EV)
    ("Win %", fun (t:studies.GapStudy.TradeSummary) -> t.WinPct)
    ("Avg Gain", fun (t:studies.GapStudy.TradeSummary) -> t.AvgGainLoss)
]

sortFunctions
|> Seq.iter (fun (sortLabel, sortFunction) ->
    printfn $"Top 5 by: {sortLabel}"
    data
    |> Seq.sortByDescending (fun (strategy, filterName, summary) -> sortFunction summary)
    |> Seq.take 5
    |> Seq.iter (fun (strategy, filterName, summary) ->
        printfn $"Strategy: {strategy}, Filter: {filterName}: {sortFunction summary}"
    )
    printfn ""
    printfn ""
)
